#!/usr/bin/env python3
# 
# Simple cmmand-line tool for BM2 bluetooth car battery monitor
#
# Copyright (c) 2022 dr-ni https://github.com/dr-ni/bm2
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
import logging
import argparse
import struct
import time
import signal
try:
    from Crypto.Cipher import AES
except ImportError:
    from Cryptodome.Cipher import AES
from bluepy import btle

KEY = b"\x6c\x65\x61\x67\x65\x6e\x64\xff\xfe\x31\x38\x38\x32\x34\x36\x36"

def handler(signum, frame):
    #res = input("Ctrl-c was pressed. Do you really want to exit? y/n ")
    #if res == 'y':
        exit(1)
 
def myatof(s):
    try:
        return float(s);
    except:
        last_result = None
        for i in range(1, len(s)):
            try:
                last_result = float(s[:i])
            except:
                return last_result
    return last_result

class MyDelegate(btle.DefaultDelegate):
    def __init__(self):
        btle.DefaultDelegate.__init__(self)
        # ... initialise here

    def handleNotification(self, cHandle, data):
        now = int( time.time() )
        encrypted_data = data
        decrypted_data = AES.new(KEY, AES.MODE_CBC, bytes([0] * 16)).decrypt(bytes(encrypted_data))
        voltage = (struct.unpack(">H", decrypted_data[1:1 + 2])[0] >> 4) / 100
        if(logfile):
            print("BM2 Bluetooth Battery Monitor (c) 2022 https://github.com/dr-ni/bm2")
            payload = f'{now} {voltage}'
            logging.basicConfig(filename=logfile,level=logging.DEBUG,format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %H:%M:%S')
            logging.info(payload)
        else:
            if(loop==False):
                payload = f'{voltage}'
                print(payload+' V')
            else:
                payload = f'{now} {voltage}'
                print(payload)
        if(loop==False):
            p.disconnect();
            exit (0)
        
# main loop
signal.signal(signal.SIGINT, handler)
argparser = argparse.ArgumentParser()
argparser.add_argument('-m', '--mac', type=str, metavar="BLE-MAC-address", required=True)
argparser.add_argument('-f', '--file', type=str, metavar="Logfile")
argparser.add_argument('-l', '--loop', action='store_true')
args = argparser.parse_args()

logfile = args.file
address = args.mac
loop = args.loop 
service_uuid = "0000fff0-0000-1000-8000-00805f9b34fb"

try:
    p = btle.Peripheral(address)
    p.setDelegate(MyDelegate())
    # Setup to turn notifications on, e.g.
    svc = p.getServiceByUUID(service_uuid)
    # print "Debug Services..."
    # for svc in dev.services:
    # 	print str(svc)
    # print 'Debug Characteristics...'
    # for ch in es_service.getCharacteristics():
    # 	print str(ch)
    # Enable the sensor, start notifications
    # Writing x01 is the protocol for all BLE notifications.
    #data_chrc.write(bytes("\x01")) 

    if(logfile):
        print("writing to file "+logfile)
  
    while True:
        if p.waitForNotifications(1.0):
        # handleNotification() was called
            continue
except Exception as e:
    print(str(e))

